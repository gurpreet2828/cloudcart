name: Terraform CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "**.tf"
      - "terraform/**"
      - "terraform-aws/**"
      - "deploy-sock-shop/**"

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Prepare placeholder join_command.sh
        run: |
          mkdir -p terraform-aws/scripts
          echo '#!/bin/bash' > terraform-aws/scripts/join_command.sh
          echo 'echo "This is a placeholder join command script."' >> terraform-aws/scripts/join_command.sh
          chmod +x terraform-aws/scripts/join_command.sh

      # - name: Prepare placeholder Sock Shop YAML
      #   run: |
      #     mkdir -p deploy-sock-shop/kubernetes
      #     cat > deploy-sock-shop/kubernetes/sock-shop-full-deployment.yaml <<EOF
      #     apiVersion: v1
      #     kind: Pod
      #     metadata:
      #       name: placeholder
      #     spec:
      #       containers:
      #       - name: placeholder
      #         image: busybox
      #         command: ["sleep", "3600"]
      #     EOF

      - name: Prepare placeholder for helm chart
        run: |
          mkdir -p terraform-aws/scripts
          echo '#!/bin/bash' > terraform-aws/scripts/helm_install.sh
          echo 'echo "This is a placeholder Helm install script."' >> terraform-aws/scripts/helm_install.sh
          chmod +x terraform-aws/scripts/helm_install.sh

      - name: Setup SSH Key for Provisioners
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/docker
          chmod 600 ~/.ssh/docker

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan

      - name: Upload Plan File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        env:
          TF_VAR_ssh_key_private: ~/.ssh/docker
        run: terraform apply -auto-approve tfplan

  deploy_app:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Wait for all nodes to be Ready
        run: |
          for i in {1..60}; do
            NOT_READY=$(kubectl get nodes --no-headers | grep -v '\<Ready\>' | wc -l)
            if [ "$NOT_READY" -eq 0 ]; then
              echo "✅ All nodes are Ready!"
              break
            fi
            echo "$NOT_READY nodes not ready yet. Retrying in 10s..."
            sleep 10
          done

          NOT_READY_FINAL=$(kubectl get nodes --no-headers | grep -v '\<Ready\>' | wc -l)
          if [ "$NOT_READY_FINAL" -ne 0 ]; then
            echo "❌ Some nodes are still NotReady after 10 minutes."
            kubectl get nodes
            exit 1
          fi

      - name: Wait for default service account
        run: |
          for i in {1..30}; do
            if kubectl get sa default >/dev/null 2>&1; then
              echo "✅ Default service account exists"
              break
            fi
            echo "⏳ Waiting for default service account..."
            sleep 5
          done

          if ! kubectl get sa default >/dev/null 2>&1; then
            echo "❌ Default service account still missing after timeout"
            exit 1
          fi

      - name: Delete placeholder pod if exists
        run: |
          kubectl delete pod placeholder --ignore-not-found

      - name: Create sock-shop namespace if missing
        run: |
          kubectl get namespace sock-shop || kubectl create namespace sock-shop

      - name: Deploy sock-shop app
        run: |
          kubectl apply -f deploy-sock-shop/kubernetes/sock-shop-full-deployment.yaml -n sock-shop

      - name: Wait for pods to be ready
        run: |
          kubectl wait --for=condition=Ready pods --all -n sock-shop --timeout=300s

      - name: List sock-shop pods
        run: kubectl get pods -n sock-shop

  deploy_monitoring:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy prometheus
        run: |
          kubectl apply -f deploy-sock-shop/kubernetes/monitoring-app/prometheus/

      - name: Deploy grafana
        run: |
          kubectl apply -f deploy-sock-shop/kubernetes/monitoring-app/grafana/
